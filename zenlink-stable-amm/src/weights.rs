// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for zenlink_stable_amm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `manjaro`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../target/release/zenlink-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// zenlink_stable_amm
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for zenlink_stable_amm.
pub trait WeightInfo {
	fn create_base_pool() -> Weight;
	fn create_meta_pool() -> Weight;
	fn add_liquidity() -> Weight;
	fn swap() -> Weight;
	fn remove_liquidity() -> Weight;
	fn remove_liquidity_one_currency() -> Weight;
	fn remove_liquidity_imbalance() -> Weight;
	fn add_pool_and_base_pool_liquidity() -> Weight;
	fn remove_pool_and_base_pool_liquidity() -> Weight;
	fn remove_pool_and_base_pool_liquidity_one_currency() -> Weight;
	fn swap_pool_from_base() -> Weight;
	fn swap_pool_to_base() -> Weight;
	fn swap_meta_pool_underlying() -> Weight;
	fn withdraw_admin_fee() -> Weight;
}

/// Weights for zenlink_stable_amm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ZenlinkStableAmm NextPoolId (r:1 w:1)
	// Storage: ZenlinkStableAmm LpCurrencies (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	fn create_base_pool() -> Weight {
		// Minimum execution time: 46_736 nanoseconds.
		Weight::from_parts(47_481_000, 0)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ZenlinkStableAmm LpCurrencies (r:2 w:1)
	// Storage: ZenlinkStableAmm NextPoolId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkStableAmm Pools (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	fn create_meta_pool() -> Weight {
		// Minimum execution time: 81_917 nanoseconds.
		Weight::from_parts(83_417_000, 0)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:1)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 142_017 nanoseconds.
		Weight::from_parts(143_700_000, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn swap() -> Weight {
		// Minimum execution time: 111_324 nanoseconds.
		Weight::from_parts(117_940_000, 0)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 144_402 nanoseconds.
		Weight::from_parts(146_147_000, 0)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity_one_currency() -> Weight {
		// Minimum execution time: 111_716 nanoseconds.
		Weight::from_parts(117_518_000, 0)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity_imbalance() -> Weight {
		// Minimum execution time: 132_703 nanoseconds.
		Weight::from_parts(133_706_000, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:9 w:9)
	// Storage: System Account (r:1 w:1)
	fn add_pool_and_base_pool_liquidity() -> Weight {
		// Minimum execution time: 248_369 nanoseconds.
		Weight::from_parts(249_976_000, 0)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(14 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:9 w:9)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:2 w:0)
	fn remove_pool_and_base_pool_liquidity() -> Weight {
		// Minimum execution time: 193_866 nanoseconds.
		Weight::from_parts(195_741_000, 0)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(13 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:2 w:0)
	fn remove_pool_and_base_pool_liquidity_one_currency() -> Weight {
		// Minimum execution time: 185_493 nanoseconds.
		Weight::from_parts(186_668_000, 0)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:1 w:0)
	fn swap_pool_from_base() -> Weight {
		// Minimum execution time: 195_027 nanoseconds.
		Weight::from_parts(196_708_000, 0)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:6 w:6)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:2 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn swap_pool_to_base() -> Weight {
		// Minimum execution time: 192_067 nanoseconds.
		Weight::from_parts(193_276_000, 0)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:6 w:6)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: System Account (r:2 w:1)
	fn swap_meta_pool_underlying() -> Weight {
		// Minimum execution time: 197_939 nanoseconds.
		Weight::from_parts(199_533_000, 0)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_admin_fee() -> Weight {
		// Minimum execution time: 77_701 nanoseconds.
		Weight::from_parts(79_068_000, 0)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ZenlinkStableAmm NextPoolId (r:1 w:1)
	// Storage: ZenlinkStableAmm LpCurrencies (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	fn create_base_pool() -> Weight {
		// Minimum execution time: 46_736 nanoseconds.
		Weight::from_parts(47_481_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: ZenlinkStableAmm LpCurrencies (r:2 w:1)
	// Storage: ZenlinkStableAmm NextPoolId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkStableAmm Pools (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	fn create_meta_pool() -> Weight {
		// Minimum execution time: 81_917 nanoseconds.
		Weight::from_parts(83_417_000, 0)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:1)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 142_017 nanoseconds.
		Weight::from_parts(143_700_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn swap() -> Weight {
		// Minimum execution time: 111_324 nanoseconds.
		Weight::from_parts(117_940_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 144_402 nanoseconds.
		Weight::from_parts(146_147_000, 0)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity_one_currency() -> Weight {
		// Minimum execution time: 111_716 nanoseconds.
		Weight::from_parts(117_518_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:1 w:0)
	fn remove_liquidity_imbalance() -> Weight {
		// Minimum execution time: 132_703 nanoseconds.
		Weight::from_parts(133_706_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:9 w:9)
	// Storage: System Account (r:1 w:1)
	fn add_pool_and_base_pool_liquidity() -> Weight {
		// Minimum execution time: 248_369 nanoseconds.
		Weight::from_parts(249_976_000, 0)
			.saturating_add(RocksDbWeight::get().reads(15 as u64))
			.saturating_add(RocksDbWeight::get().writes(14 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:9 w:9)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:2 w:0)
	fn remove_pool_and_base_pool_liquidity() -> Weight {
		// Minimum execution time: 193_866 nanoseconds.
		Weight::from_parts(195_741_000, 0)
			.saturating_add(RocksDbWeight::get().reads(15 as u64))
			.saturating_add(RocksDbWeight::get().writes(13 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:2 w:0)
	fn remove_pool_and_base_pool_liquidity_one_currency() -> Weight {
		// Minimum execution time: 185_493 nanoseconds.
		Weight::from_parts(186_668_000, 0)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:1 w:0)
	fn swap_pool_from_base() -> Weight {
		// Minimum execution time: 195_027 nanoseconds.
		Weight::from_parts(196_708_000, 0)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Tokens Accounts (r:6 w:6)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:2 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn swap_pool_to_base() -> Weight {
		// Minimum execution time: 192_067 nanoseconds.
		Weight::from_parts(193_276_000, 0)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tokens Accounts (r:6 w:6)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: System Account (r:2 w:1)
	fn swap_meta_pool_underlying() -> Weight {
		// Minimum execution time: 197_939 nanoseconds.
		Weight::from_parts(199_533_000, 0)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: ZenlinkStableAmm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_admin_fee() -> Weight {
		// Minimum execution time: 77_701 nanoseconds.
		Weight::from_parts(79_068_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
}
