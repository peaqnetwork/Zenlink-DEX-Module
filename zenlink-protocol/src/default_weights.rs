// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for zenlink_protocol
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `manjaro`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../target/release/zenlink-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// zenlink_protocol
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for zenlink_protocol.
pub trait WeightInfo {
	fn set_fee_receiver() -> Weight;
	fn set_fee_point() -> Weight;
    fn transfer() -> Weight;
	fn create_pair() -> Weight;
	fn bootstrap_create() -> Weight;
	fn bootstrap_contribute() -> Weight;
	fn bootstrap_claim() -> Weight;
	fn bootstrap_end() -> Weight;
	fn bootstrap_update() -> Weight;
	fn bootstrap_refund() -> Weight;
	fn add_liquidity() -> Weight;
	fn remove_liquidity() -> Weight;
	fn swap_exact_assets_for_assets() -> Weight;
	fn swap_assets_for_exact_assets() -> Weight;
    fn bootstrap_charge_reward() -> Weight;
    fn bootstrap_withdraw_reward() -> Weight;
}

/// Weights for zenlink_protocol using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:1)
	fn set_fee_receiver() -> Weight {
		// Minimum execution time: 11_832 nanoseconds.
		Weight::from_parts(12_352_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:1)
	fn set_fee_point() -> Weight {
		// Minimum execution time: 10_838 nanoseconds.
		Weight::from_parts(11_138_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
    // Handwritten TODO.
	fn transfer() -> Weight {
		// Minimum execution time: 10_838 nanoseconds.
		Weight::from_parts(11_138_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignList (r:1 w:0)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol LiquidityPairs (r:0 w:1)
	fn create_pair() -> Weight {
		// Minimum execution time: 39_930 nanoseconds.
		Weight::from_parts(40_455_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapLimits (r:0 w:1)
	// Storage: ZenlinkProtocol BootstrapRewards (r:0 w:1)
	fn bootstrap_create() -> Weight {
		// Minimum execution time: 33_101 nanoseconds.
		Weight::from_parts(33_789_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ZenlinkProtocol BootstrapLimits (r:1 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	fn bootstrap_contribute() -> Weight {
		// Minimum execution time: 81_992 nanoseconds.
		Weight::from_parts(84_884_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:0)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapEndStatus (r:1 w:0)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	// Storage: ZenlinkProtocol BootstrapRewards (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:2 w:2)
	fn bootstrap_claim() -> Weight {
		// Minimum execution time: 124_722 nanoseconds.
		Weight::from_parts(132_010_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkProtocol LiquidityPairs (r:0 w:1)
	// Storage: ZenlinkProtocol BootstrapEndStatus (r:0 w:1)
	fn bootstrap_end() -> Weight {
		// Minimum execution time: 118_171 nanoseconds.
		Weight::from_parts(118_892_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapRewards (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapLimits (r:0 w:1)
	fn bootstrap_update() -> Weight {
		// Minimum execution time: 43_282 nanoseconds.
		Weight::from_parts(43_886_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	fn bootstrap_refund() -> Weight {
		// Minimum execution time: 86_444 nanoseconds.
		Weight::from_parts(87_246_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ZenlinkProtocol KLast (r:1 w:0)
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 124_880 nanoseconds.
		Weight::from_parts(126_263_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ZenlinkProtocol KLast (r:1 w:0)
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 116_282 nanoseconds.
		Weight::from_parts(119_636_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:6 w:6)
	// Storage: ZenlinkProtocol PairStatuses (r:2 w:0)
	fn swap_exact_assets_for_assets() -> Weight {
		// Minimum execution time: 133_352 nanoseconds.
		Weight::from_parts(134_554_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:6 w:6)
	// Storage: ZenlinkProtocol PairStatuses (r:2 w:0)
	fn swap_assets_for_exact_assets() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}

    fn bootstrap_charge_reward() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}

    fn bootstrap_withdraw_reward() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:1)
	fn set_fee_receiver() -> Weight {
		// Minimum execution time: 11_832 nanoseconds.
		Weight::from_parts(12_352_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:1)
	fn set_fee_point() -> Weight {
		// Minimum execution time: 10_838 nanoseconds.
		Weight::from_parts(11_138_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
    // Handwritten TODO.
	fn transfer() -> Weight {
		// Minimum execution time: 10_838 nanoseconds.
		Weight::from_parts(11_138_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignList (r:1 w:0)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol LiquidityPairs (r:0 w:1)
	fn create_pair() -> Weight {
		// Minimum execution time: 39_930 nanoseconds.
		Weight::from_parts(40_455_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapLimits (r:0 w:1)
	// Storage: ZenlinkProtocol BootstrapRewards (r:0 w:1)
	fn bootstrap_create() -> Weight {
		// Minimum execution time: 33_101 nanoseconds.
		Weight::from_parts(33_789_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ZenlinkProtocol BootstrapLimits (r:1 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	fn bootstrap_contribute() -> Weight {
		// Minimum execution time: 81_992 nanoseconds.
		Weight::from_parts(84_884_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:0)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapEndStatus (r:1 w:0)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	// Storage: ZenlinkProtocol BootstrapRewards (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:2 w:2)
	fn bootstrap_claim() -> Weight {
		// Minimum execution time: 124_722 nanoseconds.
		Weight::from_parts(132_010_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ZenlinkProtocol LiquidityPairs (r:0 w:1)
	// Storage: ZenlinkProtocol BootstrapEndStatus (r:0 w:1)
	fn bootstrap_end() -> Weight {
		// Minimum execution time: 118_171 nanoseconds.
		Weight::from_parts(118_892_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapRewards (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapLimits (r:0 w:1)
	fn bootstrap_update() -> Weight {
		// Minimum execution time: 43_282 nanoseconds.
		Weight::from_parts(43_886_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ZenlinkProtocol BootstrapPersonalSupply (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	fn bootstrap_refund() -> Weight {
		// Minimum execution time: 86_444 nanoseconds.
		Weight::from_parts(87_246_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ZenlinkProtocol KLast (r:1 w:0)
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 124_880 nanoseconds.
		Weight::from_parts(126_263_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ZenlinkProtocol PairStatuses (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:4 w:4)
	// Storage: ZenlinkProtocol LiquidityPairs (r:1 w:0)
	// Storage: ZenlinkProtocol KLast (r:1 w:0)
	// Storage: ZenlinkProtocol FeeMeta (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 116_282 nanoseconds.
		Weight::from_parts(119_636_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:6 w:6)
	// Storage: ZenlinkProtocol PairStatuses (r:2 w:0)
	fn swap_exact_assets_for_assets() -> Weight {
		// Minimum execution time: 133_352 nanoseconds.
		Weight::from_parts(134_554_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ZenlinkProtocol ForeignLedger (r:6 w:6)
	// Storage: ZenlinkProtocol PairStatuses (r:2 w:0)
	fn swap_assets_for_exact_assets() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}

    fn bootstrap_charge_reward() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}

    fn bootstrap_withdraw_reward() -> Weight {
		// Minimum execution time: 134_003 nanoseconds.
		Weight::from_parts(135_040_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
}
